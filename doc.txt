
                                  Введение
----------------------------------------------------------------------------------
Движок MarsEngine, созданный на основе визуальной бибилиотеки ebiten.

Примечание:
Движок не направлен на создание серьезного проекта. Большие архитектуры и сложные механики реализованы неудобно.

Создатель: WetCat
Дата последнего редактирования: 10.11.2022

                         Краткая документация по функциям
----------------------------------------------------------------------------------

Start() - Запуск движка

WindowName(name string) - Задать название окну

WindowSize(width int, height int) - Задать размер окна

CreateObject(name string, texture string, posX float64, posY float64, angle int, demo bool) - Создание игрового объекта

ObjectPosX(name string) - Вернет позицию X объекта

ObjectPosY(name string) - Вернет позицию Y объекта

ObjectAngle(name string) - Вернет текущий угол поворота объекта

ObjectDemo(name string) - Вернет отображаемость объекта

SetObjectPos(name string, posX float64, posY float64) - Смена координат объекта

SetObjectTexture(name string, texture string) - Сменит текстуру объекта

SetObjectDemo(name string, demo bool) - Смена видимости объекта

MoveObject(name string, posX float64, posY float64) - Подвинуть объект на заданное количество координат

FPS() - Вернет текущий FPS в формате float64

MousePos() - Вернет текущее положение мыши в двух int значениях, по x и y

SetObjectAngle(name string, angle int) - Повернет объект на заданный градус относительно исходного положения ( ИСПОЛЬЗОВАТЬ ОСТОРОЖНО !)

RotateObject(name string, angle int) - Повернет объект на заданный градут с учетом текущего угла ( ИСПОЛЬЗОВАТЬ ОСТОРОЖНО !)

CheckObjectsOnCor(x int, y int) - Вернет имя объекта на заданных координатах, если объектов несколько вернет первый, если объектов нет вернет "nil"

AddCollision(name string) - Добавит указанный объект в список коллизий, т.е. у указанного объекта появится свойство коллизии

CheckCollision() - Возращает результаты коллизий объектов. Вернет два имени объектов, который совершили соприкосновение. Если коллизий нет, вернет "nil" "nil"

P.S: Коллизия реализована примитивно, поэтому если объекты повернуты, это не повлияет на результат коллизии.

KeyboardHandler(key string) - Вернет true если нажата указанная клавиша, в ином случае вернет false

Клавиши для функции KeyboardHandler() записываются в следующем формате:
Буквы "q", "t"
Числа "1" "5"
F "f1" "f12"
Стрелочки "up" "down" "left" "right"
Спец.клавиши "space" "backspace" "esc" "del" "shift" "shift_r" "ctrl" "ctrl_r" "alt" "alt_r" "tab" "-" "=" "enter"

MouseHandler(button string) - Вернет true если нажата заданная кнопка мыши, false если не нажата

Кнопки для функции MouseHandler() записываются в формате:
Левая кнопка мыши "left"
Правая кнопка мыши "right"
Кнопка колеса мыши "middle"

                            Конструкция хандлера клавиатуры/мыши
----------------------------------------------------------------------------------

for {
    // Синхронизация с кадрами
	SyncFrame()
	// Здесь ваши события
	if engine.KeyboardHandler("q") {
    	// что-то
    }
}

                            Рекомендуемая архитектура
----------------------------------------------------------------------------------

// Функция будет стоять вторым потоком, в ней можно проводить изменения объектов и строить логику
func update() {
    // Желательная задержка перед запуском движка
    time.Sleep(time.Second * 2)
}

// Главная функция
func main() {
	// Настройки окна
	engine.WindowName("Window")
	engine.WindowSize(1920, 1080)

	// Создание дефолтных объектов
	engine.CreateObject("just_object", "путь_к_текстуре", 0, 0, true)

	// Запуск апдейта на второй поток
	go update()

	// Запуск движка основным потоком
	engine.Start()
}
